import { ReactNode, useMemo } from "react";
import { CHARACTERS } from "./CHARACTERS";
import { Message } from "./Message";

type PodcastProps = {
  topic?: string;
  speakers: string[];
  children: ReactNode;
};

export type MessageEntry = {
  name: string;
  message: string;
};

export const CharacterImages = new Map(
  CHARACTERS.map((ch) => [ch.name, ch.image])
);

export const SAMPLE_MESSAGES = [
  {
    name: "Harry Potter",
    message: "Hey Vader, have you tried Butterbeer? It's amazing!",
  },
  {
    name: "Darth Vader",
    message:
      "Butterbeer? Is it strong enough to mask the taste of the Dark Side?",
  },
  {
    name: "Harry Potter",
    message:
      "It's not about strength, it's about flavor! What's your favorite Sith snack then?",
  },
  {
    name: "Darth Vader",
    message:
      "I find your lack of appreciation for the Dark Side's culinary delights disturbing. I prefer something more ominous, like Death Star-shaped cookies.",
  },
  {
    name: "Harry Potter",
    message:
      "Death Star-shaped cookies sound intriguing! Do they explode with flavor?",
  },
  {
    name: "Darth Vader",
    message:
      "They do, metaphorically. What about your world? Any magical meals worth mentioning?",
  },
  {
    name: "Harry Potter",
    message: "Absolutely! Ever tried Chocolate Frogs? They jump in your mouth!",
  },
  {
    name: "Darth Vader",
    message:
      "Frogs? That sounds unsavory. However, I am curious about your Firewhisky. Is it as potent as it sounds?",
  },
  {
    name: "Harry Potter",
    message:
      "Firewhisky is strong enough to make even dragons roar. Care to try some?",
  },
  {
    name: "Darth Vader",
    message:
      "Perhaps another time. Tell me, Potter, do you have a favorite spell for cooking?",
  },
  {
    name: "Harry Potter",
    message: "Accio ingredients! It's quite handy when I'm feeling lazy.",
  },
  {
    name: "Darth Vader",
    message:
      "Efficient, I'll give you that. In my realm, we rely more on precision and mastery. Do you duel over dinner as you do with wands?",
  },
  {
    name: "Harry Potter",
    message:
      "Not exactly dueling, but we do have feasts and celebrations. How about the Sith? Any grand banquets?",
  },
  {
    name: "Darth Vader",
    message:
      "Only when the Emperor commands it. The Dark Side doesn't indulge in frivolous feasts. We prefer more... focused gatherings.",
  },
  {
    name: "Harry Potter",
    message:
      "I guess that explains your lean figure! Do you have any foods you miss from before you turned to the Dark Side?",
  },
  {
    name: "Darth Vader",
    message:
      "There is one... Alderaanian spice pudding. It reminds me of a time before... before everything.",
  },
  {
    name: "Harry Potter",
    message:
      "Food has a way of connecting us to memories. I hope you find a way to enjoy it again someday.",
  },
  {
    name: "Darth Vader",
    message: "Thank you, Potter. Your sentimentality is... unexpected.",
  },
  {
    name: "Harry Potter",
    message:
      "Even Sith Lords deserve a good meal now and then. Perhaps one day we could share a Butterbeer.",
  },
  {
    name: "Darth Vader",
    message:
      "A curious proposition, Potter. Perhaps when the galaxy is less tumultuous.",
  },
];

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/noPzK4Cur2M
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
export function Podcast({ speakers, topic, children }: PodcastProps) {
  if (!speakers || !topic) {
    return null;
  }
  const intl = new Intl.ListFormat("en", {
    style: "long",
    type: "conjunction",
  });
  const hosts = intl.format(speakers);

  return (
    <div className="flex flex-col h-full w-full max-w-4xl mx-auto bg-white rounded-2xl shadow-lg overflow-hidden">
      <div className="bg-black text-white px-6 py-4 flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold mb-3">
            <span className="font-light">Topic of the day -</span> {topic}
          </h2>
          <p className="text-sm text-primarywhite/80">Hosted by {hosts}</p>
        </div>
        <div className="flex items-center gap-4">
          {/* <button className="text-white hover:text-primarywhite/80 transition-colors">
            <PlayIcon className="w-6 h-6" />
          </button>
          <button className="text-white hover:text-primarywhite/80 transition-colors">
            <PauseIcon className="w-6 h-6" />
          </button> */}
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-6 space-y-4">{children}</div>
    </div>
  );
}
